const path = require('path');
const fs = require('fs');
const glob = require('glob');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');

const logger = require('../server/logger');
const pkg = require(path.resolve(process.cwd(), 'package.json'));
const dllConfig = require('./dllConfig');
const webpackBaseConfig = require('./webpack.base');

const plugins = [
  new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
  new webpack.NoEmitOnErrorsPlugin(),
  new HtmlWebpackPlugin({
    inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
    template: 'src/index.html'
  }),
]

glob.sync(`${dllConfig.path}/*.dll.js`).forEach((dllPath) => {
  plugins.push(
    new AddAssetHtmlPlugin({
      filepath: dllPath,
      includeSourcemap: false,
    })
  )
})

const dependencyHandlers = () => {
  // Don't do anything during the DLL Build step
  if (process.env.BUILDING_DLL) { return [] }

  const manifestNames = Object.keys(dllConfig.entry())

  return manifestNames.map(manifestName => {
    const manifestPath = path.resolve(dllConfig.path, `${manifestName}.json`);
    if (!fs.existsSync(manifestPath)) {
      logger.error(`The following Webpack DLL manifest is missing: ${manifestName}`);
      logger.error(`Expected to find it in ${dllConfig.path}`);
      logger.error('Please run: npm run build:dll');
      process.exit(0);
    }

    return new webpack.DllReferencePlugin({
      context: process.cwd(),
      manifest: require(manifestPath)
    });
  });
}

module.exports = webpackBaseConfig({
  // Add hot reloading in development
  entry: [
    'eventsource-polyfill', // Necessary for hot reloading with IE
    'webpack-hot-middleware/client?reload=true&quiet=true',
    path.resolve(process.cwd(), 'src')
  ],

  // Don't use hashes in dev mode for better performance
  output: {
    filename: '[name].js',
    chunkFilename: '[name].chunk.js',
  },

  // Add development plugins
  plugins: dependencyHandlers().concat(plugins),

  // Emit a source map for easier debugging
  // See https://webpack.js.org/configuration/devtool/#devtool
  devtool: 'eval',

  performance: {
    hints: false,
  }
});
